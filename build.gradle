buildscript {
    ext.kotlinVersion = '1.1.0-dev-1159'
    repositories {
        maven { url 'https://repo.gradle.org/gradle/repo' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.1.1'
    }
}


apply from: 'build.gradle.kts'

dependencies {
    compile gradleApi()
}

// -- Performance testing ----------------------------------------------
//
// 1. Creates a custom Gradle installation with latest gradle-script-kotlin jar
//
// 2. Benchmarks latest installation against configured wrapper
//
def customInstallationDir = file("$buildDir/custom/gradle-${gradle.gradleVersion}")

task copyCurrentDistro(type: Copy) {
    description "Copies the current Gradle distro into '${customInstallationDir}'."

    from gradle.gradleHomeDir
    into customInstallationDir

    // preserve last modified date on each file to make it easier
    // to check which files were patched by next step
    def copyDetails = []
    eachFile { copyDetails << it }
    doLast {
        copyDetails.each { FileCopyDetails details ->
            def target = new File(customInstallationDir, details.path)
            target.setLastModified(details.lastModified)
        }
    }

    // don't bother recreating it
    onlyIf { !customInstallationDir.exists() }
}

task customInstallation(type: Copy, dependsOn: copyCurrentDistro) {
    description "Copies latest gradle-script-kotlin snapshot over the custom installation."

    from configurations.compile
    from tasks.jar
    into "$customInstallationDir/lib"
}

test.dependsOn customInstallation

task benchmark(type: integration.Benchmark, dependsOn: customInstallation) {
    latestInstallation = customInstallationDir
}


// -- Integration testing ---------------------------------------------
task checkSamples(type: integration.CheckSamples, dependsOn: customInstallation) {
    installation = customInstallationDir
}
check.dependsOn checkSamples


// --- classpath.properties --------------------------------------------
File generatedResourcesDir = file("$buildDir/generate-resources/main")
task generateClasspathManifest(type: codegen.GenerateClasspathManifest) {
    outputDirectory = generatedResourcesDir
}
sourceSets {
    main.output.dir generatedResourcesDir, builtBy: generateClasspathManifest
}


// --- Configure publications ------------------------------------------
def buildTagFor(String version) {
    switch (version.substring(version.lastIndexOf('-') + 1)) {
        case 'SNAPSHOT':
            return 'snapshot'
        case ~/M\d+[a-z]*$/:
            return 'milestone'
        default:
            return 'release'
    }
}

def targetRepoKey = "libs-${buildTagFor(project.version)}s-local"

artifactory {
    contextUrl = "https://repo.gradle.org/gradle"
    publish {
        repository {
            repoKey = targetRepoKey
            username = project.findProperty("artifactory_user") ?: "nouser"
            password = project.findProperty("artifactory_password") ?: "nopass"
            maven = true
        }
        defaults {
            publications('mavenJava')
        }
    }
    resolve {
        repoKey = 'repo'
    }
}
